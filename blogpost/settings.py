"""
Django settings for blogpost project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import dj_database_url
from pathlib import Path
from django.conf.global_settings import LOGIN_REDIRECT_URL, MEDIA_ROOT, EMAIL_BACKEND
# from decouple import config

BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-p3tskz8lqdio_t=i@8utbuet(hom%b0$tddhr*pe$ez_t67j41')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = ['yappuccino-ef85d40e1d34.herokuapp.com', 'localhost', '127.0.0.1']

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Application definition

INSTALLED_APPS = [
    # 'rest_framework',
    # 'rest_framework_simplejwt',
    'django_ckeditor_5',
    'users.apps.UsersConfig',
    'blog.apps.BlogConfig',
    'crispy_forms',
    'crispy_bootstrap5',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'whitenoise.runserver_nostatic',
    'storages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'blogpost.urls'

# TODO -- front on react -- prob later
# REST_FRAMEWORK = {
#     'DEFAULT_PERMISSION_CLASSES': [
#         'rest_framework.permissions.IsAuthenticated',
#     ],
#     'DEFAULT_AUTHENTICATION_CLASSES': [
#         'rest_framework.authentication.SessionAuthentication',
#         'rest_framework_simplejwt.authentication.JWTAuthentication',
#     ],
# }
# config CORS
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000",  # react server
# ]
# instaed of CORS_ALLOWED_ORIGINS
# CORS_ALLOWED_ORIGIN_REGEXES = [
#     r"^https://.*\.domain\.com$",
# ]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.debug',
                'django.template.context_processors.media',
								'blog.context_processors.navigation_tags',
            ],
        },
    },
]

WSGI_APPLICATION = 'blogpost.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

def clean_database_url(url):
    # remove pgbouncer param in url --  if exists
    if url and 'pgbouncer=true' in url:
        parts = url.split('?')
        if len(parts)>1:
            base = parts[0]
            params = parts[1].split('&')
            filtered_params = [p for p in params if not p.startswith('pgbouncer=')]
            return base + '?' + '&'.join(filtered_params)
    return url

if 'DATABASE_URL' in os.environ:
    os.environ['DATABASE_URL'] = clean_database_url(os.environ['DATABASE_URL'])

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# whiteNoise for static files in prod
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# ==== backblaze B2 settings ==== #
if not DEBUG:
    # credentials
    B2_ACCESS_KEY_ID = os.environ.get('B2_ACCESS_KEY_ID')
    B2_SECRET_ACCESS_KEY = os.environ.get('B2_SECRET_ACCESS_KEY')
    B2_BUCKET_NAME = os.environ.get('B2_BUCKET_NAME')

    # storage
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

    # b2 settings
    AWS_ACCESS_KEY_ID = B2_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY = B2_SECRET_ACCESS_KEY
    AWS_STORAGE_BUCKET_NAME = B2_BUCKET_NAME
    AWS_S3_ENDPOINT_URL = 'https://s3.eu-central-003.backblazeb2.com'
    AWS_S3_REGION_NAME = 'eu-central-003'
    AWS_DEFAULT_ACL = 'public-read'
    AWS_QUERYSTRING_AUTH = False
    AWS_S3_VERIFY = True

    # ckeditor config â†’ use b2 for uploads
    CKEDITOR_5_FILE_STORAGE = DEFAULT_FILE_STORAGE
    CKEDITOR_5_UPLOAD_PATH = "uploads/"

    MEDIA_URL = f'https://{B2_BUCKET_NAME}.s3.eu-central-003.backblazeb2.com/'
else:
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


CKEDITOR_RESTRICT_BY_USER = False
CKEDITOR_BROWSE_SHOW_DIRS = True

CKEDITOR_5_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
CKEDITOR_5_UPLOAD_PATH = "uploads/"

CKEDITOR_5_CONFIGS = {
    'default': {
        'toolbar': ['heading', '|', 'bold', 'italic', 'link',
                   'bulletedList', 'numberedList', 'blockQuote', 'imageUpload', ],
        'uploadUrl': '/ckeditor5/upload/',
        'image': {
            'toolbar': ['imageTextAlternative', '|', 'imageStyle:alignLeft', 'imageStyle:full', 'imageStyle:alignRight'],
            'styles': ['full', 'alignLeft', 'alignRight'],
            'upload': {
                'types': ['jpeg', 'png', 'gif', 'jpg'],
            },
        },
    },
    'basic': {
        'toolbar': ['bold', 'italic', 'link', 'bulletedList', 'numberedList', 'imageUpload'],
        'uploadUrl': '/ckeditor5/upload/',
    },
}

BLEACH_ALLOWED_TAGS = [
    'a', 'abbr', 'acronym', 'b', 'blockquote', 'code', 'em', 'i', 'li', 'ol',
    'p', 'strong', 'ul', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'pre', 'span',
    'img', 'table', 'tbody', 'tr', 'td', 'th', 'thead', 'tfoot', 'hr', 'br',
    'div', 'caption', 'sub', 'sup', 'figure', 'figcaption',
]

BLEACH_ALLOWED_ATTRIBUTES = {
    'a': ['href', 'title', 'target', 'rel'],
    'abbr': ['title'],
    'acronym': ['title'],
    'img': ['src', 'alt', 'title', 'style', 'width', 'height', 'class'],
    'table': ['width', 'border', 'align', 'cellpadding', 'cellspacing', 'class'],
    'td': ['width', 'align', 'valign', 'colspan', 'rowspan', 'class'],
    'th': ['width', 'align', 'valign', 'colspan', 'rowspan', 'class'],
    'p': ['style', 'class'],
    'div': ['style', 'class'],
    'span': ['style', 'class'],
    '*': ['class', 'style'],
}

BLEACH_ALLOWED_STYLES = [
    'font-family', 'font-size', 'font-weight', 'font-style', 'text-decoration',
    'text-align', 'color', 'background-color', 'margin', 'padding', 'width',
    'height', 'border', 'border-color', 'border-width', 'border-style', 'float',
]

BLEACH_STRIP_COMMENTS = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

LOGIN_REDIRECT_URL = 'blog-home'
LOGIN_URL = 'login'


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_PASSWORD')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'blog': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}